## Cloud services

PLPipes provides shortcuts for accessing common cloud services.

### Azure

#### Authentication

Package `plpipes.cloud.azure.auth` provides an easy way to manage
Azure credentials.

##### API

Credential objects of type `azure.identity.MsalCredential` can be
retrieved using function `credentials` as follows:

```python
import plpipes.cloud.azure.auth
cred = plpipes.cloud.azure.auth.credentials("predictland")
```

##### Configuration

Authentication accounts are declared in the configuration files and
instantiated by the module on demand (which for some kind of
authentication methods may require user interaction).

For instance, the following configuration snippet defines the
authorization account `predictland`.

```yaml
cloud:
  azure:
    auth:
      predictland:
        type: interactive_browser
        tenant_id: 01234567-89ab-cdef-0123-456789abcdef
        client_id: 01234567-89ab-cdef-0123-456789abcdef
        client_secret: super-super-super-super-secret
        authentication_callback_port: 8283
        username: elvis@predictland.com
        scopes:
          - "https://graph.microsoft.com/.default"
```

The meaning of every key is as follows:

- `type`: indicates the type of authentication to be used. It
defaults to `InteractiveBrowserCredential`.

- `scopes`: the list of scopes (groups of permissions) to be
requested. This entry is optional, as most Azure services would re-ask
for the credentials with the scopes they need.

Every driver may also accept and/or require additional configuration
entries:

###### `interactive_browser`:

Launches a browser and lets the use authenticate using her
account. Credentials are cached when possible.

- `client_id` and `client_secret`: are the application credentials
which must be registered in Azure Active Directory (AAD). See
[Register
Application](https://learn.microsoft.com/en-us/azure/healthcare-apis/register-application)
at MS Learn website.

- `tenant_id`: the tenant where the application has been registered.

- `username`: expected user, optional. Note that when Azure shows the
login page to the user, it allows her to login with any account
registered in the tenant AD. When this option is used, the framework
ensures that the user logs with the expected one. Otherwise it throws
an error.

- `authentication_callback_port`: The framework starts an HTTP server
at the given port in order to receive the data from the user browser
(afterwards it is stopped). The port must be the same used to register
the application in AAD.


###### `az_cli`:

Uses Azure command line client (`az`) for authentication.

Accepted entries are as follows:

- `private` (defaults to true): whether to use a private `az`
  configuration for this login or the global one for the user.

  In the later case, the global configuration must be initialized by
  the user calling `az login`.

### Google Cloud

*Note: This is a work in progress*

#### Authentication

##### API

Credential objects of type `google.auth.credentials.Credentials` can
be retrieved using function `credentials` as follows:

```python
import plpipes.cloud.cloud.auth
cred = plpipes.cloud.cloud.auth.credentials("predictland")
```

##### Configuration

Authentication accounts are declared in the configuration files and
instantiated by the module on demand (which for some kind of
authentication methods may require user interaction).

For instance, the following configuration snippet defines the
authorization account `predictland`.

```yaml
cloud:
  azure:
    auth:
      predictland:
        type: oauth2
        scopes:
          - "https://www.googleapis.com/auth/cloud-platform"
        ...
```

The meaning of every key is as follows:

- `type`: name of the authentication backend.
- `scopes`: list of scope for which access is being requested.

Every backend requires a different set of additional options:

###### `oauth2`

- `installed`: the additional entries required by
  `google_auth_oauthlib.flow.InstalledAppFlow.from_client_config`
  (`client_id`, `project_id`, `auth_uri`, `token_uri`,
  `auth_provider_x509_cert_url`, `client_secret` and `redirect_uris').

  Those options can be retrieved from the JSON file generated by
  GoogleCloud when a new OAuth2 installed applications is registered
  ([GoogleCloud Console](https://console.cloud.google.com/welcome) →
  APIs & Services → Credentials → Create Credentials → OAuth Client ID →
  Desktop App → Download JSON).

Example:

```yaml
google:
  auth:
    predictland:
      type: oauth2
      installed:
        client_id: "..."
        project_id: "predictland"
        auth_uri: "https://accounts.google.com/o/oauth2/auth"
        token_uri: "https://oauth2.googleapis.com/token"
        auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs"
        client_secret: "..."
        redirect_uris: ["http://localhost"]
      scopes:
        - https://www.googleapis.com/auth/cloud-platform
```

### Microsoft Graph

Interaction with MS Graph API, which provides access to OneDrive,
SharePoint and Teams resources, is available through the package
`plpipes.cloud.azure.graph`.

#### API

- `graph(account_name)`: returns an object of class
msgraph.code.GraphClient. Note that the Python Azure SDK is still in
beta, in a state of flush and so, this method may return objects of a
different class in the future.

`fs(account_name)`: returns an object that allows to access MS Graph
resources as a file system.

##### File-system view

The file system facade class exposes MS Graph resources as a file
system.

Resources are exposed under different routes as follows:

- `me`: Business user OneDrive drive.

- `groups`: Teams group drives.


The file system objects returned by `fs` support the following
methods:

- `go(path)`: You can think of this method as a change dir (`cd`)
  operation with the particularity that it also allows one to descend
  into file-like resources.

  The returned value is a new file system object with the root at
  `path`.

- `ls(path)`: Return a dictionary of file-name and entry pairs
  representing the entries under the directory `path`.

- `names(path)`: Similar to `ls` but returns only the names of the
  entries.

- `is_file()` and `is_dir()`: Determines where the current file system
  object is pointing to a file or a directory respectively.

- `get(path="", dest=None, dir=None, name=None)`: downloads the remote
  object pointed by the current file system object.

  When `dest` is given it is used as the local destination path.

  Alternatively, when `dest` is not given, `dir` and `name` values (or
  their defaults) are used to construct the local destination
  path. `name` defaults to the remote file name. `dir` defaults to the
  working directory (i.e. `cfg['fs.work']`).

- `rget(path="", dest=None, dir=None, name=None)`: recursively downloads
  the remote object (typically a directory) to the current file
  system.

Example usage:

```python
import plpipes.cloud.azure.graph

fs = plpipes.cloud.azure.graph.fs("predictland")
group_drive = fs.go("groups/HAL/General")
group_drive.rget("input-data")
```

#### Configuration

Currently, the only supported configuration parameter is `credentials`
with must be the name of an Azure authentication account defined under
`cloud.azure.auth`. When not given, it defaults to the one of the same
name.

```yaml
cloud:
  azure:
    graph:
      predictland:
        credentials: predictland
```

### OpenAI (ChatGPT)

PLPipes provides a very thin wrapper for the `openai` package.

Currently, it just automates the authentication side, reading the API
key from the configuration and setting it on the client package.

```python
import plpipes.cloud.openai as openai
completion = openai.Completion.create(...)
```

If used outside actions, if should be taken into account that
PLPipes config subsystem must be initialized before importing
`plpipes.cloud.openai`.

#### Configuration

```yaml
cloud:
  openai:
    auth:
      api_key: YOUR-SECRET-KEY-GOES-HERE
```
